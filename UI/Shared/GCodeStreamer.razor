@using Microsoft.AspNetCore.Components.Forms
@using PrinterManager;
@using System.Text;
@using System.Reactive.Linq;
@using System.Collections.Concurrent;

@implements IDisposable

<div class="frame">
    <div class="output">
        @foreach (var msg in outputBuffer)
        {
            <div class="log">@msg</div>
        }
        <div class="log">@outputBuilder.ToString()</div>
    </div>

    <div class="statistics">
        <div>
            Progress: @MetricsPercentage(currentLine, lineCount) %
        </div>
        <div>
            Layer: @MetricsNumber(currentLayer) / @MetricsNumber(layerCount) (@MetricsPercentage(currentLayer, layerCount) %)
        </div>
        <div>
            Height: @MetricsNumber(currentHeight) mm
        </div>
        <div>
            Current Line: @currentLineType
        </div>
        <div>
            Current Mesh: @currentMesh
        </div>

        @if (running == false)
        {
            <div>
                <InputFile OnChange="@LoadFiles" multiple />
            </div>
        }
    </div>
</div>

@code {
    private ConcurrentQueue<string> outputBuffer = new ConcurrentQueue<string>();
    private string inputBuffer = string.Empty;
    private StringBuilder outputBuilder = new StringBuilder();
    private bool running = false;

    // Metrics
    private int layerCount = -1;
    private int currentLayer = -1;
    private int lineCount = -1;
    private int currentLine = -1;
    private float currentHeight = -1;
    private string currentLineType = "??";
    private string currentMesh = "??";

    [Inject]
    public required IPrinterClient PrinterClient { get; set; }

    public void Dispose()
    {
        running = false;
    }

    protected override void OnInitialized()
    {
    }

    private void MessageReceived(byte[] data)
    {
        var message = Encoding.ASCII.GetString(data);
        AddOutput(message);
        InvokeAsync(StateHasChanged);
    }

    private void AddOutput(string message)
    {
        for (int i = 0; i < message.Length; i++)
        {
            if (message[i] == '\n')
            {
                outputBuffer.Enqueue(outputBuilder.ToString());
                outputBuilder.Clear();
            }
            else
            {
                outputBuilder.Append(message[i]);
            }
        }

        while (outputBuffer.Count > 50)
        {
            outputBuffer.TryDequeue(out _);
        }
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        running = true;
        var fileStream = e.File.OpenReadStream(maxAllowedSize: e.File.Size);
        RunStream(fileStream); // Run in background
    }

    private async Task RunStream(Stream stream)
    {
        try
        {
            string[] gCodeLines = Array.Empty<string>();
            using (var reader = new StreamReader(stream))
            {
                var gCodeScript = await reader.ReadToEndAsync();
                gCodeLines = gCodeScript.Replace("\r\n", "\n").Split('\n');
            }
            string buffer = "";
            int lineIndex = 0;
            var yields = 0;

            CollectStaticMetrics(gCodeLines);

            var subscription = PrinterClient
                    .OnResponseData
                    .Select(d => Encoding.ASCII.GetString(d))
                    .Subscribe(m =>
                    {
                        AddOutput(m);
                        buffer += m;
                        InvokeAsync(StateHasChanged);
                    });

            while (running)
            {
                var line = gCodeLines[lineIndex];
                currentLine = lineIndex;
                lineIndex++;

                if (line == null)
                {
                    running = false;
                    break;
                }

                CollectOutgoingMetrics(line);

                // Skip Comments
                if (line.StartsWith(';') || string.IsNullOrWhiteSpace(line))
                {
                    AddOutput($"> {line}\n");
                    continue;
                }

                var data = Encoding.ASCII.GetBytes(line);
                AddOutput($"> {line}\n");

                PrinterClient.Communicator.Send(data);

                while (buffer.Contains("ok") == false)
                {
                    if (buffer.Contains("busy"))
                    {
                        await Task.Delay(100);
                    }
                    else
                    {
                        await Task.Yield();
                        yields++;

                        if (yields >= 10)
                        {
                            await Task.Delay(1);
                            yields = 0;
                        }
                    }

                    buffer = buffer.ToString();
                }

                buffer = string.Empty;
                await InvokeAsync(StateHasChanged);   
            }
        }
        catch (Exception e)
        {
        }
    }

    /// <summary>
    ///  Collects the non-changing parts of the metrics.
    /// </summary>
    /// <param name="lines">The lines of the GCode file.</param>
    private void CollectStaticMetrics(string[] lines)
    {
        var lastLayerMarker = lines.LastOrDefault(l => l.StartsWith(";LAYER:"));

        if (lastLayerMarker != null)
        {
            var layerNumberStr = lastLayerMarker.Substring(";LAYER:".Length);
            if (int.TryParse(layerNumberStr, out var layerNumber))
            {
                layerCount = layerNumber;
                currentLayer = 0;
            }
        }

        lineCount = lines.Length;
        currentLine = 0;
    }

    /// <summary>
    /// Collect metrics from the line being sent out.
    /// </summary>
    /// <param name="line"></param>
    private void CollectOutgoingMetrics(string line)
    {
        if (line.StartsWith("G0") || line.StartsWith("G1"))
        {
            var zPosIndex = line.IndexOf("Z");
            if (zPosIndex >= 0)
            {
                zPosIndex++; // Skip the Z letter

                var endOfZPos = line.IndexOf(' ', zPosIndex);
                endOfZPos = endOfZPos >= 0
                    ? endOfZPos
                    : line.Length;

                var zValueStr = line.Substring(zPosIndex, endOfZPos - zPosIndex);
                if (float.TryParse(zValueStr, out var zPos))
                {
                    currentHeight = zPos;
                }
                else
                {
                    currentHeight = -1;
                }
            }
        }
        else if (line.StartsWith(";TYPE:"))
        {
            currentLineType = line.Substring(";TYPE:".Length);
        }
        else if (line.StartsWith(";MESH:"))
        {
            currentMesh = line.Substring(";MESH:".Length);
        }
        else if (line.StartsWith(";LAYER:"))
        {
            var layerNumberStr = line.Substring(";LAYER:".Length);
            if (int.TryParse(layerNumberStr, out var layer))
            {
                currentLayer = layer;
            }
            else
            {
                currentLayer = -1;
            }
        }
    }

    private string MetricsNumber(int value)
    {
        return value == -1
            ? "??"
            : value.ToString();
    }

    private string MetricsNumber(float value)
    {
        return value == -1
            ? "??"
            : value.ToString("0.000");
    }

    private string MetricsPercentage(float current, float max)
    {
        return (current == -1 || max == -1)
            ? "??"
            : (current / max * 100.0f).ToString("0.000");
    }
}
