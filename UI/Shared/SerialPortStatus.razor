@using PrinterManager.Communicators;

@implements IDisposable

@if (Communicator == null)
{
    return;
}

<span>Port:</span>
<select @bind="Port">
    <option></option>
    @foreach (var port in SerialPortCommunicator.GetAvailablePorts())
    {
        <option>@port</option>
    }
</select>


@if (Communicator.IsOpen)
{
    <span>✓</span>
}
else
{
    <span>✗</span>
}


@code {
    private bool running = false;

    [Inject]
    public SerialPortCommunicator? Communicator { get; set; }

    private string? Port
    {
        get => Communicator?.PortName;
        set => Communicator?.Open(value ?? string.Empty);
    }

    public void Dispose()
    {
        running = false;
    }

    protected override void OnInitialized()
    {
        running = true;
        RefreshTask().Monitor();
    }

    private async Task RefreshTask()
    {
        while (running)
        {
            this.StateHasChanged();
            await Task.Delay(500);
        }
    }
}
