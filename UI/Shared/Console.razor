@using PrinterManager;
@using System.Text;

@implements IDisposable

<div class="frame">
    <div class="output">
        @foreach (var msg in outputBuffer)
        {
            <div class="log">@msg</div>
        }
        <div class="log">@outputBuilder.ToString()</div>
    </div>
    
    <input class="input" @bind="inputBuffer" @bind:event="oninput" @onkeypress="OnInputKeypress" />
</div>

@code {
    private Queue<string> outputBuffer = new Queue<string>();
    private string inputBuffer = string.Empty;
    private StringBuilder outputBuilder = new StringBuilder();

    [Parameter]
    public ICommunicator? Communicator { get; set; }

    public void Dispose()
    {
        if (Communicator != null)
        {
            Communicator.OnMessage -= MessageReceived;
        }
    }

    protected override void OnInitialized()
    {
        if (Communicator == null)
        {
            throw new Exception("No communicator is provided");
        }

        Communicator.OnMessage += MessageReceived;
    }

    private void MessageReceived(string message)
    {
        AddOutput(message);
        StateHasChanged();
    }

    private void OnInputKeypress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            if (Communicator != null)
            {
                Communicator.Send(inputBuffer);
            }

            AddOutput($">>>>> {inputBuffer}\n");
            inputBuffer = string.Empty;
        }
    }

    private void AddOutput(string message)
    {
        for (int i = 0; i < message.Length; i++)
        {
            if (message[i] == '\n')
            {
                outputBuffer.Enqueue(outputBuilder.ToString());
                outputBuilder.Clear();
            }
            else
            {
                outputBuilder.Append(message[i]);
            }
        }

        while (outputBuffer.Count > 50)
        {
            outputBuffer.TryDequeue(out _);
        }
    }
}
